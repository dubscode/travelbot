# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # AWS Bedrock Client Factory
    App\Service\AI\Providers\BedrockClientFactory:
        arguments:
            $region: '%env(AWS_REGION)%'
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: bedrock }

    # AI Provider Services
    App\Service\AI\Providers\ClaudeService:
        arguments:
            $clientFactory: '@App\Service\AI\Providers\BedrockClientFactory'
            $sonnetModel: '%env(BEDROCK_CLAUDE_SONNET_MODEL)%'
            $haikuModel: '%env(BEDROCK_CLAUDE_HAIKU_MODEL)%'
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: claude }

    App\Service\AI\Providers\TitanEmbeddingsService:
        arguments:
            $clientFactory: '@App\Service\AI\Providers\BedrockClientFactory'
            $cache: '@cache.app'
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: embeddings }

    # Main AI Service Facade
    App\Service\AI\AIService:
        arguments:
            $claudeService: '@App\Service\AI\Providers\ClaudeService'
            $embeddingsService: '@App\Service\AI\Providers\TitanEmbeddingsService'
            $clientFactory: '@App\Service\AI\Providers\BedrockClientFactory'
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: ai }

    # Backward compatibility alias for existing ClaudeService references
    App\Service\ClaudeService: '@App\Service\AI\Providers\ClaudeService'

    # RAG System Services
    App\Service\TravelQueryAnalyzer:
        arguments:
            $claudeService: '@App\Service\AI\Providers\ClaudeService'
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: query_analyzer }

    App\Service\VectorSearchService:
        arguments:
            $entityManager: '@doctrine.orm.entity_manager'
            $aiService: '@App\Service\AI\AIService'

    App\Service\SearchResultRanker:
        arguments:
            $preferenceTracker: '@App\Service\TravelPreferenceTracker'
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: result_ranker }

    App\Service\RAGContextBuilder:
        arguments:
            $vectorSearchService: '@App\Service\VectorSearchService'
            $destinationRepository: '@App\Repository\DestinationRepository'
            $resortRepository: '@App\Repository\ResortRepository'
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: rag_context }

    App\Service\TravelPreferenceTracker:
        arguments:
            $entityManager: '@doctrine.orm.entity_manager'
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: preference_tracker }

    # Updated Application Services
    App\Service\TravelRecommenderService:
        arguments:
            $claudeService: '@App\Service\AI\Providers\ClaudeService'
            $destinationRepository: '@App\Repository\DestinationRepository'
            $queryAnalyzer: '@App\Service\TravelQueryAnalyzer'
            $vectorSearchService: '@App\Service\VectorSearchService'
            $resultRanker: '@App\Service\SearchResultRanker'
            $contextBuilder: '@App\Service\RAGContextBuilder'
            $preferenceTracker: '@App\Service\TravelPreferenceTracker'
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: travel_recommender }
    
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
