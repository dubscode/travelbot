<turbo-frame id="messages-container">
{% for message in messages %}
    <div class="message {{ message.role }}">
        <div class="message-avatar">
            {% if message.role == 'user' %}
                {{ user.name|first|upper }}
            {% else %}
                ðŸ¤–
            {% endif %}
        </div>
        <div class="message-bubble">
            {{ message.content|nl2br }}
            {% if message.modelUsed %}
                <div style="font-size: 12px; opacity: 0.7; margin-top: 8px;">
                    {% if 'haiku' in message.modelUsed|lower %}
                        âš¡ Fast response
                    {% else %}
                        ðŸ§  Detailed response
                    {% endif %}
                </div>
            {% endif %}
        </div>
    </div>
{% endfor %}

<script>
// Immediately show typing indicator and fetch AI response
setTimeout(() => {
    const typingIndicator = document.getElementById('typing-indicator');
    if (typingIndicator) {
        typingIndicator.style.display = 'flex';
    }
    
    // Scroll to show typing indicator
    const container = document.querySelector('.chat-messages');
    if (container) {
        container.scrollTop = container.scrollHeight;
    }

    // Trigger AI response fetch
    fetch('{{ path('app_chat_ai_response', {'messageId': userMessageId}) }}', {
        headers: {
            'Accept': 'text/html',
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.text();
    })
    .then(html => {
        // Replace the turbo frame with the updated content
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const newFrame = doc.querySelector('turbo-frame[id="messages-container"]');
        if (newFrame) {
            const currentFrame = document.querySelector('turbo-frame[id="messages-container"]');
            if (currentFrame) {
                currentFrame.innerHTML = newFrame.innerHTML;
            }
        }
        
        // Hide typing indicator and re-enable form
        const typingIndicator = document.getElementById('typing-indicator');
        if (typingIndicator) {
            typingIndicator.style.display = 'none';
        }
        
        const btn = document.getElementById('send-btn');
        if (btn) {
            btn.disabled = false;
            btn.textContent = 'Send ðŸ“¨';
        }
        
        // Scroll to bottom
        const container = document.querySelector('.chat-messages');
        if (container) {
            container.scrollTop = container.scrollHeight;
        }
    })
    .catch(error => {
        console.error('Error fetching AI response:', error);
        
        // Hide typing indicator and re-enable form
        const typingIndicator = document.getElementById('typing-indicator');
        if (typingIndicator) {
            typingIndicator.style.display = 'none';
        }
        
        const btn = document.getElementById('send-btn');
        if (btn) {
            btn.disabled = false;
            btn.textContent = 'Send ðŸ“¨';
        }
        
        // Show error message
        const currentFrame = document.querySelector('turbo-frame[id="messages-container"]');
        if (currentFrame) {
            const errorHtml = `
                <div class="message assistant">
                    <div class="message-avatar">ðŸ¤–</div>
                    <div class="message-bubble">
                        Sorry, I encountered an error processing your request. Please try again.
                    </div>
                </div>
            `;
            currentFrame.innerHTML += errorHtml;
        }
    });
}, 100); // Small delay to ensure DOM is ready
</script>
</turbo-frame>